trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Using a secure file is recommended for SSH keys, but this follows your original setup.
  SSH_PRIVATE_KEY: $(sshPrivateKey)

steps:
# 1. Prepare SonarQube Analysis Configuration
# This task configures the scanner before the build runs.
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'MySonarQubeService'
    scannerMode: 'Maven' # Crucial change: Set scannerMode to 'Maven'
    extraProperties: |
      # This property tells SonarQube where to find the compiled Java class files.
      sonar.java.binaries=target
      #
      # REMOVED: 'sonar.branch.name' - This fixes the Community Edition license error.
      # REMOVED: 'sonar.host.url' and 'sonar.projectName' - These are automatically
      # configured by the service connection and Maven pom.xml respectively.
      #

# 2. Build Project and Run SonarQube Analysis with Maven
# The 'sonar:sonar' goal tells Maven to perform the SonarQube analysis and
# publish the results to the server.
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean package sonar:sonar' # Crucial change: Added 'sonar:sonar' goal
    options: '-DskipTests'

# NOTE: The SonarQubeAnalyze and SonarQubePublish tasks have been removed.
# They are not needed when using the 'sonar:sonar' goal in Maven, as it
# handles both analysis and publishing.

# 3. Deploy the application to the Virtual Machine
- script: |
    echo "$SSH_PRIVATE_KEY" > key.pem
    chmod 600 key.pem

    echo "Creating app directory on remote VM..."
    ssh -i key.pem -o StrictHostKeyChecking=no azureuser@4.172.227.190 'mkdir -p /home/azureuser/app'

    echo "Copying JAR to remote VM..."
    scp -i key.pem -o StrictHostKeyChecking=no target/*.jar azureuser@4.172.227.190:/home/azureuser/app/app.jar

    echo "Restarting Spring Boot app..."
    ssh -i key.pem -o StrictHostKeyChecking=no azureuser@4.172.227.190 << EOF
      pkill -f 'java -jar' || true
      nohup java -jar /home/azureuser/app/app.jar > /home/azureuser/app/app.log 2>&1 &
    EOF
  displayName: 'Deploy to VM2'
